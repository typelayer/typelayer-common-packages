"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const myFirstPackageSchemasMyFirstModuleStructures = __importStar(require("../schemas/myFirstModule/structures"));
const myFirstPackageServicesMyFirstServiceDynamic = __importStar(require("../services/myFirstService/dynamic"));
const myFirstPackageServicesMyFirstServiceStructures = __importStar(require("../services/myFirstService/structures"));
const typelayerCommonEncodingsJson = __importStar(require("typelayer-common"));
const typelayerCommonEncodingsMsgpack = __importStar(require("typelayer-common"));
const chai = __importStar(require("chai"));
const mocha = __importStar(require("mocha"));
mocha.describe("myFirstServiceEncodableSymmetry", () => {
    mocha.it("myFirstFunctionInputMyFirstArgument0Json", () => {
        let decoder;
        let encoder;
        let encoding;
        let myFirstArgumentFieldTestVal;
        let resultingBin;
        let val;
        let valToCheck;
        encoding = new typelayerCommonEncodingsJson.JsonEncoding({});
        myFirstArgumentFieldTestVal = "";
        val = new myFirstPackageServicesMyFirstServiceStructures.MyFirstFunctionInput({ myFirstArgument: myFirstArgumentFieldTestVal });
        encoder = encoding.encodingStartEncoding();
        myFirstPackageServicesMyFirstServiceDynamic.dynamicPutMyFirstFunctionInput(encoder, val);
        resultingBin = encoder.encoderToBinary();
        decoder = encoding.encodingStartDecoding(resultingBin);
        valToCheck = myFirstPackageServicesMyFirstServiceDynamic.dynamicGetObjMyFirstFunctionInput(decoder);
        chai.expect(val).to.deep.equal(valToCheck);
    });
    mocha.it("myFirstFunctionInputMyFirstArgument0MsgPack", () => {
        let decoder;
        let encoder;
        let encoding;
        let myFirstArgumentFieldTestVal;
        let resultingBin;
        let val;
        let valToCheck;
        encoding = new typelayerCommonEncodingsMsgpack.MsgPackEncoding({});
        myFirstArgumentFieldTestVal = "";
        val = new myFirstPackageServicesMyFirstServiceStructures.MyFirstFunctionInput({ myFirstArgument: myFirstArgumentFieldTestVal });
        encoder = encoding.encodingStartEncoding();
        myFirstPackageServicesMyFirstServiceDynamic.dynamicPutMyFirstFunctionInput(encoder, val);
        resultingBin = encoder.encoderToBinary();
        decoder = encoding.encodingStartDecoding(resultingBin);
        valToCheck = myFirstPackageServicesMyFirstServiceDynamic.dynamicGetObjMyFirstFunctionInput(decoder);
        chai.expect(val).to.deep.equal(valToCheck);
    });
    mocha.it("myFirstFunctionInputMyFirstArgument1Json", () => {
        let decoder;
        let encoder;
        let encoding;
        let myFirstArgumentFieldTestVal;
        let resultingBin;
        let val;
        let valToCheck;
        encoding = new typelayerCommonEncodingsJson.JsonEncoding({});
        myFirstArgumentFieldTestVal = "a";
        val = new myFirstPackageServicesMyFirstServiceStructures.MyFirstFunctionInput({ myFirstArgument: myFirstArgumentFieldTestVal });
        encoder = encoding.encodingStartEncoding();
        myFirstPackageServicesMyFirstServiceDynamic.dynamicPutMyFirstFunctionInput(encoder, val);
        resultingBin = encoder.encoderToBinary();
        decoder = encoding.encodingStartDecoding(resultingBin);
        valToCheck = myFirstPackageServicesMyFirstServiceDynamic.dynamicGetObjMyFirstFunctionInput(decoder);
        chai.expect(val).to.deep.equal(valToCheck);
    });
    mocha.it("myFirstFunctionInputMyFirstArgument1MsgPack", () => {
        let decoder;
        let encoder;
        let encoding;
        let myFirstArgumentFieldTestVal;
        let resultingBin;
        let val;
        let valToCheck;
        encoding = new typelayerCommonEncodingsMsgpack.MsgPackEncoding({});
        myFirstArgumentFieldTestVal = "a";
        val = new myFirstPackageServicesMyFirstServiceStructures.MyFirstFunctionInput({ myFirstArgument: myFirstArgumentFieldTestVal });
        encoder = encoding.encodingStartEncoding();
        myFirstPackageServicesMyFirstServiceDynamic.dynamicPutMyFirstFunctionInput(encoder, val);
        resultingBin = encoder.encoderToBinary();
        decoder = encoding.encodingStartDecoding(resultingBin);
        valToCheck = myFirstPackageServicesMyFirstServiceDynamic.dynamicGetObjMyFirstFunctionInput(decoder);
        chai.expect(val).to.deep.equal(valToCheck);
    });
    mocha.it("myFirstFunctionInputMyFirstArgument2Json", () => {
        let decoder;
        let encoder;
        let encoding;
        let myFirstArgumentFieldTestVal;
        let resultingBin;
        let val;
        let valToCheck;
        encoding = new typelayerCommonEncodingsJson.JsonEncoding({});
        myFirstArgumentFieldTestVal = "abc";
        val = new myFirstPackageServicesMyFirstServiceStructures.MyFirstFunctionInput({ myFirstArgument: myFirstArgumentFieldTestVal });
        encoder = encoding.encodingStartEncoding();
        myFirstPackageServicesMyFirstServiceDynamic.dynamicPutMyFirstFunctionInput(encoder, val);
        resultingBin = encoder.encoderToBinary();
        decoder = encoding.encodingStartDecoding(resultingBin);
        valToCheck = myFirstPackageServicesMyFirstServiceDynamic.dynamicGetObjMyFirstFunctionInput(decoder);
        chai.expect(val).to.deep.equal(valToCheck);
    });
    mocha.it("myFirstFunctionInputMyFirstArgument2MsgPack", () => {
        let decoder;
        let encoder;
        let encoding;
        let myFirstArgumentFieldTestVal;
        let resultingBin;
        let val;
        let valToCheck;
        encoding = new typelayerCommonEncodingsMsgpack.MsgPackEncoding({});
        myFirstArgumentFieldTestVal = "abc";
        val = new myFirstPackageServicesMyFirstServiceStructures.MyFirstFunctionInput({ myFirstArgument: myFirstArgumentFieldTestVal });
        encoder = encoding.encodingStartEncoding();
        myFirstPackageServicesMyFirstServiceDynamic.dynamicPutMyFirstFunctionInput(encoder, val);
        resultingBin = encoder.encoderToBinary();
        decoder = encoding.encodingStartDecoding(resultingBin);
        valToCheck = myFirstPackageServicesMyFirstServiceDynamic.dynamicGetObjMyFirstFunctionInput(decoder);
        chai.expect(val).to.deep.equal(valToCheck);
    });
    mocha.it("myFirstFunctionOutputMyFirstReturn0Json", () => {
        let decoder;
        let encoder;
        let encoding;
        let myFirstReturnFieldTestVal;
        let resultingBin;
        let val;
        let valToCheck;
        encoding = new typelayerCommonEncodingsJson.JsonEncoding({});
        myFirstReturnFieldTestVal = myFirstPackageSchemasMyFirstModuleStructures.defaultMyFirstStructure();
        val = new myFirstPackageServicesMyFirstServiceStructures.MyFirstFunctionOutput({ myFirstReturn: myFirstReturnFieldTestVal });
        encoder = encoding.encodingStartEncoding();
        myFirstPackageServicesMyFirstServiceDynamic.dynamicPutMyFirstFunctionOutput(encoder, val);
        resultingBin = encoder.encoderToBinary();
        decoder = encoding.encodingStartDecoding(resultingBin);
        valToCheck = myFirstPackageServicesMyFirstServiceDynamic.dynamicGetObjMyFirstFunctionOutput(decoder);
        chai.expect(val).to.deep.equal(valToCheck);
    });
    mocha.it("myFirstFunctionOutputMyFirstReturn0MsgPack", () => {
        let decoder;
        let encoder;
        let encoding;
        let myFirstReturnFieldTestVal;
        let resultingBin;
        let val;
        let valToCheck;
        encoding = new typelayerCommonEncodingsMsgpack.MsgPackEncoding({});
        myFirstReturnFieldTestVal = myFirstPackageSchemasMyFirstModuleStructures.defaultMyFirstStructure();
        val = new myFirstPackageServicesMyFirstServiceStructures.MyFirstFunctionOutput({ myFirstReturn: myFirstReturnFieldTestVal });
        encoder = encoding.encodingStartEncoding();
        myFirstPackageServicesMyFirstServiceDynamic.dynamicPutMyFirstFunctionOutput(encoder, val);
        resultingBin = encoder.encoderToBinary();
        decoder = encoding.encodingStartDecoding(resultingBin);
        valToCheck = myFirstPackageServicesMyFirstServiceDynamic.dynamicGetObjMyFirstFunctionOutput(decoder);
        chai.expect(val).to.deep.equal(valToCheck);
    });
    mocha.it("mySecondFunctionInputArgOne0Json", () => {
        let argOneFieldTestVal;
        let argTwoDefault;
        let decoder;
        let encoder;
        let encoding;
        let resultingBin;
        let val;
        let valToCheck;
        encoding = new typelayerCommonEncodingsJson.JsonEncoding({});
        argOneFieldTestVal = myFirstPackageSchemasMyFirstModuleStructures.defaultMyEnumStructure();
        argTwoDefault = "";
        val = new myFirstPackageServicesMyFirstServiceStructures.MySecondFunctionInput({ argOne: argOneFieldTestVal, argTwo: argTwoDefault });
        encoder = encoding.encodingStartEncoding();
        myFirstPackageServicesMyFirstServiceDynamic.dynamicPutMySecondFunctionInput(encoder, val);
        resultingBin = encoder.encoderToBinary();
        decoder = encoding.encodingStartDecoding(resultingBin);
        valToCheck = myFirstPackageServicesMyFirstServiceDynamic.dynamicGetObjMySecondFunctionInput(decoder);
        chai.expect(val).to.deep.equal(valToCheck);
    });
    mocha.it("mySecondFunctionInputArgOne0MsgPack", () => {
        let argOneFieldTestVal;
        let argTwoDefault;
        let decoder;
        let encoder;
        let encoding;
        let resultingBin;
        let val;
        let valToCheck;
        encoding = new typelayerCommonEncodingsMsgpack.MsgPackEncoding({});
        argOneFieldTestVal = myFirstPackageSchemasMyFirstModuleStructures.defaultMyEnumStructure();
        argTwoDefault = "";
        val = new myFirstPackageServicesMyFirstServiceStructures.MySecondFunctionInput({ argOne: argOneFieldTestVal, argTwo: argTwoDefault });
        encoder = encoding.encodingStartEncoding();
        myFirstPackageServicesMyFirstServiceDynamic.dynamicPutMySecondFunctionInput(encoder, val);
        resultingBin = encoder.encoderToBinary();
        decoder = encoding.encodingStartDecoding(resultingBin);
        valToCheck = myFirstPackageServicesMyFirstServiceDynamic.dynamicGetObjMySecondFunctionInput(decoder);
        chai.expect(val).to.deep.equal(valToCheck);
    });
    mocha.it("mySecondFunctionInputArgTwo0Json", () => {
        let argOneDefault;
        let argTwoFieldTestVal;
        let decoder;
        let encoder;
        let encoding;
        let resultingBin;
        let val;
        let valToCheck;
        encoding = new typelayerCommonEncodingsJson.JsonEncoding({});
        argTwoFieldTestVal = "";
        argOneDefault = myFirstPackageSchemasMyFirstModuleStructures.defaultMyEnumStructure();
        val = new myFirstPackageServicesMyFirstServiceStructures.MySecondFunctionInput({ argTwo: argTwoFieldTestVal, argOne: argOneDefault });
        encoder = encoding.encodingStartEncoding();
        myFirstPackageServicesMyFirstServiceDynamic.dynamicPutMySecondFunctionInput(encoder, val);
        resultingBin = encoder.encoderToBinary();
        decoder = encoding.encodingStartDecoding(resultingBin);
        valToCheck = myFirstPackageServicesMyFirstServiceDynamic.dynamicGetObjMySecondFunctionInput(decoder);
        chai.expect(val).to.deep.equal(valToCheck);
    });
    mocha.it("mySecondFunctionInputArgTwo0MsgPack", () => {
        let argOneDefault;
        let argTwoFieldTestVal;
        let decoder;
        let encoder;
        let encoding;
        let resultingBin;
        let val;
        let valToCheck;
        encoding = new typelayerCommonEncodingsMsgpack.MsgPackEncoding({});
        argTwoFieldTestVal = "";
        argOneDefault = myFirstPackageSchemasMyFirstModuleStructures.defaultMyEnumStructure();
        val = new myFirstPackageServicesMyFirstServiceStructures.MySecondFunctionInput({ argTwo: argTwoFieldTestVal, argOne: argOneDefault });
        encoder = encoding.encodingStartEncoding();
        myFirstPackageServicesMyFirstServiceDynamic.dynamicPutMySecondFunctionInput(encoder, val);
        resultingBin = encoder.encoderToBinary();
        decoder = encoding.encodingStartDecoding(resultingBin);
        valToCheck = myFirstPackageServicesMyFirstServiceDynamic.dynamicGetObjMySecondFunctionInput(decoder);
        chai.expect(val).to.deep.equal(valToCheck);
    });
    mocha.it("mySecondFunctionInputArgTwo1Json", () => {
        let argOneDefault;
        let argTwoFieldTestVal;
        let decoder;
        let encoder;
        let encoding;
        let resultingBin;
        let val;
        let valToCheck;
        encoding = new typelayerCommonEncodingsJson.JsonEncoding({});
        argTwoFieldTestVal = "a";
        argOneDefault = myFirstPackageSchemasMyFirstModuleStructures.defaultMyEnumStructure();
        val = new myFirstPackageServicesMyFirstServiceStructures.MySecondFunctionInput({ argTwo: argTwoFieldTestVal, argOne: argOneDefault });
        encoder = encoding.encodingStartEncoding();
        myFirstPackageServicesMyFirstServiceDynamic.dynamicPutMySecondFunctionInput(encoder, val);
        resultingBin = encoder.encoderToBinary();
        decoder = encoding.encodingStartDecoding(resultingBin);
        valToCheck = myFirstPackageServicesMyFirstServiceDynamic.dynamicGetObjMySecondFunctionInput(decoder);
        chai.expect(val).to.deep.equal(valToCheck);
    });
    mocha.it("mySecondFunctionInputArgTwo1MsgPack", () => {
        let argOneDefault;
        let argTwoFieldTestVal;
        let decoder;
        let encoder;
        let encoding;
        let resultingBin;
        let val;
        let valToCheck;
        encoding = new typelayerCommonEncodingsMsgpack.MsgPackEncoding({});
        argTwoFieldTestVal = "a";
        argOneDefault = myFirstPackageSchemasMyFirstModuleStructures.defaultMyEnumStructure();
        val = new myFirstPackageServicesMyFirstServiceStructures.MySecondFunctionInput({ argTwo: argTwoFieldTestVal, argOne: argOneDefault });
        encoder = encoding.encodingStartEncoding();
        myFirstPackageServicesMyFirstServiceDynamic.dynamicPutMySecondFunctionInput(encoder, val);
        resultingBin = encoder.encoderToBinary();
        decoder = encoding.encodingStartDecoding(resultingBin);
        valToCheck = myFirstPackageServicesMyFirstServiceDynamic.dynamicGetObjMySecondFunctionInput(decoder);
        chai.expect(val).to.deep.equal(valToCheck);
    });
    mocha.it("mySecondFunctionInputArgTwo2Json", () => {
        let argOneDefault;
        let argTwoFieldTestVal;
        let decoder;
        let encoder;
        let encoding;
        let resultingBin;
        let val;
        let valToCheck;
        encoding = new typelayerCommonEncodingsJson.JsonEncoding({});
        argTwoFieldTestVal = "abc";
        argOneDefault = myFirstPackageSchemasMyFirstModuleStructures.defaultMyEnumStructure();
        val = new myFirstPackageServicesMyFirstServiceStructures.MySecondFunctionInput({ argTwo: argTwoFieldTestVal, argOne: argOneDefault });
        encoder = encoding.encodingStartEncoding();
        myFirstPackageServicesMyFirstServiceDynamic.dynamicPutMySecondFunctionInput(encoder, val);
        resultingBin = encoder.encoderToBinary();
        decoder = encoding.encodingStartDecoding(resultingBin);
        valToCheck = myFirstPackageServicesMyFirstServiceDynamic.dynamicGetObjMySecondFunctionInput(decoder);
        chai.expect(val).to.deep.equal(valToCheck);
    });
    mocha.it("mySecondFunctionInputArgTwo2MsgPack", () => {
        let argOneDefault;
        let argTwoFieldTestVal;
        let decoder;
        let encoder;
        let encoding;
        let resultingBin;
        let val;
        let valToCheck;
        encoding = new typelayerCommonEncodingsMsgpack.MsgPackEncoding({});
        argTwoFieldTestVal = "abc";
        argOneDefault = myFirstPackageSchemasMyFirstModuleStructures.defaultMyEnumStructure();
        val = new myFirstPackageServicesMyFirstServiceStructures.MySecondFunctionInput({ argTwo: argTwoFieldTestVal, argOne: argOneDefault });
        encoder = encoding.encodingStartEncoding();
        myFirstPackageServicesMyFirstServiceDynamic.dynamicPutMySecondFunctionInput(encoder, val);
        resultingBin = encoder.encoderToBinary();
        decoder = encoding.encodingStartDecoding(resultingBin);
        valToCheck = myFirstPackageServicesMyFirstServiceDynamic.dynamicGetObjMySecondFunctionInput(decoder);
        chai.expect(val).to.deep.equal(valToCheck);
    });
    mocha.it("mySecondFunctionOutputRetOne0Json", () => {
        let decoder;
        let encoder;
        let encoding;
        let resultingBin;
        let retOneFieldTestVal;
        let val;
        let valToCheck;
        encoding = new typelayerCommonEncodingsJson.JsonEncoding({});
        retOneFieldTestVal = [];
        val = new myFirstPackageServicesMyFirstServiceStructures.MySecondFunctionOutput({ retOne: retOneFieldTestVal });
        encoder = encoding.encodingStartEncoding();
        myFirstPackageServicesMyFirstServiceDynamic.dynamicPutMySecondFunctionOutput(encoder, val);
        resultingBin = encoder.encoderToBinary();
        decoder = encoding.encodingStartDecoding(resultingBin);
        valToCheck = myFirstPackageServicesMyFirstServiceDynamic.dynamicGetObjMySecondFunctionOutput(decoder);
        chai.expect(val).to.deep.equal(valToCheck);
    });
    mocha.it("mySecondFunctionOutputRetOne0MsgPack", () => {
        let decoder;
        let encoder;
        let encoding;
        let resultingBin;
        let retOneFieldTestVal;
        let val;
        let valToCheck;
        encoding = new typelayerCommonEncodingsMsgpack.MsgPackEncoding({});
        retOneFieldTestVal = [];
        val = new myFirstPackageServicesMyFirstServiceStructures.MySecondFunctionOutput({ retOne: retOneFieldTestVal });
        encoder = encoding.encodingStartEncoding();
        myFirstPackageServicesMyFirstServiceDynamic.dynamicPutMySecondFunctionOutput(encoder, val);
        resultingBin = encoder.encoderToBinary();
        decoder = encoding.encodingStartDecoding(resultingBin);
        valToCheck = myFirstPackageServicesMyFirstServiceDynamic.dynamicGetObjMySecondFunctionOutput(decoder);
        chai.expect(val).to.deep.equal(valToCheck);
    });
    mocha.it("mySecondFunctionOutputRetOne1Json", () => {
        let decoder;
        let encoder;
        let encoding;
        let resultingBin;
        let retOneBlocks;
        let retOneFieldTestVal;
        let val;
        let valToCheck;
        encoding = new typelayerCommonEncodingsJson.JsonEncoding({});
        retOneBlocks = "";
        retOneFieldTestVal = [retOneBlocks];
        val = new myFirstPackageServicesMyFirstServiceStructures.MySecondFunctionOutput({ retOne: retOneFieldTestVal });
        encoder = encoding.encodingStartEncoding();
        myFirstPackageServicesMyFirstServiceDynamic.dynamicPutMySecondFunctionOutput(encoder, val);
        resultingBin = encoder.encoderToBinary();
        decoder = encoding.encodingStartDecoding(resultingBin);
        valToCheck = myFirstPackageServicesMyFirstServiceDynamic.dynamicGetObjMySecondFunctionOutput(decoder);
        chai.expect(val).to.deep.equal(valToCheck);
    });
    mocha.it("mySecondFunctionOutputRetOne1MsgPack", () => {
        let decoder;
        let encoder;
        let encoding;
        let resultingBin;
        let retOneBlocks;
        let retOneFieldTestVal;
        let val;
        let valToCheck;
        encoding = new typelayerCommonEncodingsMsgpack.MsgPackEncoding({});
        retOneBlocks = "";
        retOneFieldTestVal = [retOneBlocks];
        val = new myFirstPackageServicesMyFirstServiceStructures.MySecondFunctionOutput({ retOne: retOneFieldTestVal });
        encoder = encoding.encodingStartEncoding();
        myFirstPackageServicesMyFirstServiceDynamic.dynamicPutMySecondFunctionOutput(encoder, val);
        resultingBin = encoder.encoderToBinary();
        decoder = encoding.encodingStartDecoding(resultingBin);
        valToCheck = myFirstPackageServicesMyFirstServiceDynamic.dynamicGetObjMySecondFunctionOutput(decoder);
        chai.expect(val).to.deep.equal(valToCheck);
    });
    mocha.it("mySecondFunctionOutputRetOne2Json", () => {
        let decoder;
        let encoder;
        let encoding;
        let resultingBin;
        let retOneBlocks;
        let retOneFieldTestVal;
        let val;
        let valToCheck;
        encoding = new typelayerCommonEncodingsJson.JsonEncoding({});
        retOneBlocks = "";
        retOneFieldTestVal = [retOneBlocks, retOneBlocks];
        val = new myFirstPackageServicesMyFirstServiceStructures.MySecondFunctionOutput({ retOne: retOneFieldTestVal });
        encoder = encoding.encodingStartEncoding();
        myFirstPackageServicesMyFirstServiceDynamic.dynamicPutMySecondFunctionOutput(encoder, val);
        resultingBin = encoder.encoderToBinary();
        decoder = encoding.encodingStartDecoding(resultingBin);
        valToCheck = myFirstPackageServicesMyFirstServiceDynamic.dynamicGetObjMySecondFunctionOutput(decoder);
        chai.expect(val).to.deep.equal(valToCheck);
    });
    mocha.it("mySecondFunctionOutputRetOne2MsgPack", () => {
        let decoder;
        let encoder;
        let encoding;
        let resultingBin;
        let retOneBlocks;
        let retOneFieldTestVal;
        let val;
        let valToCheck;
        encoding = new typelayerCommonEncodingsMsgpack.MsgPackEncoding({});
        retOneBlocks = "";
        retOneFieldTestVal = [retOneBlocks, retOneBlocks];
        val = new myFirstPackageServicesMyFirstServiceStructures.MySecondFunctionOutput({ retOne: retOneFieldTestVal });
        encoder = encoding.encodingStartEncoding();
        myFirstPackageServicesMyFirstServiceDynamic.dynamicPutMySecondFunctionOutput(encoder, val);
        resultingBin = encoder.encoderToBinary();
        decoder = encoding.encodingStartDecoding(resultingBin);
        valToCheck = myFirstPackageServicesMyFirstServiceDynamic.dynamicGetObjMySecondFunctionOutput(decoder);
        chai.expect(val).to.deep.equal(valToCheck);
    });
});
