import * as myFirstPackageSchemasMyFirstModuleStructures from "../schemas/myFirstModule/structures";
import * as myFirstPackageServicesMyFirstServiceDynamic from "../services/myFirstService/dynamic";
import * as myFirstPackageServicesMyFirstServiceStructures from "../services/myFirstService/structures";
import * as typelayerCommonDynamic from "typelayer-common";
import * as typelayerCommonEncodingsJson from "typelayer-common";
import * as typelayerCommonEncodingsMsgpack from "typelayer-common";
import * as chai from "chai";
import * as mocha from "mocha";
mocha.describe("myFirstServiceEncodableSymmetry", () => {
    mocha.it("myFirstFunctionInputMyFirstArgument0Json", () => {
        let decoder : typelayerCommonDynamic.Decoder;
        let encoder : typelayerCommonDynamic.Encoder;
        let encoding : typelayerCommonDynamic.Encoding;
        let myFirstArgumentFieldTestVal : string;
        let resultingBin : Uint8Array;
        let val : myFirstPackageServicesMyFirstServiceStructures.MyFirstFunctionInput;
        let valToCheck : myFirstPackageServicesMyFirstServiceStructures.MyFirstFunctionInput;
        encoding = new typelayerCommonEncodingsJson.JsonEncoding({});
        myFirstArgumentFieldTestVal = "";
        val = new myFirstPackageServicesMyFirstServiceStructures.MyFirstFunctionInput({myFirstArgument: myFirstArgumentFieldTestVal});
        encoder = encoding.encodingStartEncoding();
        myFirstPackageServicesMyFirstServiceDynamic.dynamicPutMyFirstFunctionInput(encoder, val);
        resultingBin = encoder.encoderToBinary();
        decoder = encoding.encodingStartDecoding(resultingBin);
        valToCheck = myFirstPackageServicesMyFirstServiceDynamic.dynamicGetObjMyFirstFunctionInput(decoder);
        chai.expect(val).to.deep.equal(valToCheck);
    });
    mocha.it("myFirstFunctionInputMyFirstArgument0MsgPack", () => {
        let decoder : typelayerCommonDynamic.Decoder;
        let encoder : typelayerCommonDynamic.Encoder;
        let encoding : typelayerCommonDynamic.Encoding;
        let myFirstArgumentFieldTestVal : string;
        let resultingBin : Uint8Array;
        let val : myFirstPackageServicesMyFirstServiceStructures.MyFirstFunctionInput;
        let valToCheck : myFirstPackageServicesMyFirstServiceStructures.MyFirstFunctionInput;
        encoding = new typelayerCommonEncodingsMsgpack.MsgPackEncoding({});
        myFirstArgumentFieldTestVal = "";
        val = new myFirstPackageServicesMyFirstServiceStructures.MyFirstFunctionInput({myFirstArgument: myFirstArgumentFieldTestVal});
        encoder = encoding.encodingStartEncoding();
        myFirstPackageServicesMyFirstServiceDynamic.dynamicPutMyFirstFunctionInput(encoder, val);
        resultingBin = encoder.encoderToBinary();
        decoder = encoding.encodingStartDecoding(resultingBin);
        valToCheck = myFirstPackageServicesMyFirstServiceDynamic.dynamicGetObjMyFirstFunctionInput(decoder);
        chai.expect(val).to.deep.equal(valToCheck);
    });
    mocha.it("myFirstFunctionInputMyFirstArgument1Json", () => {
        let decoder : typelayerCommonDynamic.Decoder;
        let encoder : typelayerCommonDynamic.Encoder;
        let encoding : typelayerCommonDynamic.Encoding;
        let myFirstArgumentFieldTestVal : string;
        let resultingBin : Uint8Array;
        let val : myFirstPackageServicesMyFirstServiceStructures.MyFirstFunctionInput;
        let valToCheck : myFirstPackageServicesMyFirstServiceStructures.MyFirstFunctionInput;
        encoding = new typelayerCommonEncodingsJson.JsonEncoding({});
        myFirstArgumentFieldTestVal = "a";
        val = new myFirstPackageServicesMyFirstServiceStructures.MyFirstFunctionInput({myFirstArgument: myFirstArgumentFieldTestVal});
        encoder = encoding.encodingStartEncoding();
        myFirstPackageServicesMyFirstServiceDynamic.dynamicPutMyFirstFunctionInput(encoder, val);
        resultingBin = encoder.encoderToBinary();
        decoder = encoding.encodingStartDecoding(resultingBin);
        valToCheck = myFirstPackageServicesMyFirstServiceDynamic.dynamicGetObjMyFirstFunctionInput(decoder);
        chai.expect(val).to.deep.equal(valToCheck);
    });
    mocha.it("myFirstFunctionInputMyFirstArgument1MsgPack", () => {
        let decoder : typelayerCommonDynamic.Decoder;
        let encoder : typelayerCommonDynamic.Encoder;
        let encoding : typelayerCommonDynamic.Encoding;
        let myFirstArgumentFieldTestVal : string;
        let resultingBin : Uint8Array;
        let val : myFirstPackageServicesMyFirstServiceStructures.MyFirstFunctionInput;
        let valToCheck : myFirstPackageServicesMyFirstServiceStructures.MyFirstFunctionInput;
        encoding = new typelayerCommonEncodingsMsgpack.MsgPackEncoding({});
        myFirstArgumentFieldTestVal = "a";
        val = new myFirstPackageServicesMyFirstServiceStructures.MyFirstFunctionInput({myFirstArgument: myFirstArgumentFieldTestVal});
        encoder = encoding.encodingStartEncoding();
        myFirstPackageServicesMyFirstServiceDynamic.dynamicPutMyFirstFunctionInput(encoder, val);
        resultingBin = encoder.encoderToBinary();
        decoder = encoding.encodingStartDecoding(resultingBin);
        valToCheck = myFirstPackageServicesMyFirstServiceDynamic.dynamicGetObjMyFirstFunctionInput(decoder);
        chai.expect(val).to.deep.equal(valToCheck);
    });
    mocha.it("myFirstFunctionInputMyFirstArgument2Json", () => {
        let decoder : typelayerCommonDynamic.Decoder;
        let encoder : typelayerCommonDynamic.Encoder;
        let encoding : typelayerCommonDynamic.Encoding;
        let myFirstArgumentFieldTestVal : string;
        let resultingBin : Uint8Array;
        let val : myFirstPackageServicesMyFirstServiceStructures.MyFirstFunctionInput;
        let valToCheck : myFirstPackageServicesMyFirstServiceStructures.MyFirstFunctionInput;
        encoding = new typelayerCommonEncodingsJson.JsonEncoding({});
        myFirstArgumentFieldTestVal = "abc";
        val = new myFirstPackageServicesMyFirstServiceStructures.MyFirstFunctionInput({myFirstArgument: myFirstArgumentFieldTestVal});
        encoder = encoding.encodingStartEncoding();
        myFirstPackageServicesMyFirstServiceDynamic.dynamicPutMyFirstFunctionInput(encoder, val);
        resultingBin = encoder.encoderToBinary();
        decoder = encoding.encodingStartDecoding(resultingBin);
        valToCheck = myFirstPackageServicesMyFirstServiceDynamic.dynamicGetObjMyFirstFunctionInput(decoder);
        chai.expect(val).to.deep.equal(valToCheck);
    });
    mocha.it("myFirstFunctionInputMyFirstArgument2MsgPack", () => {
        let decoder : typelayerCommonDynamic.Decoder;
        let encoder : typelayerCommonDynamic.Encoder;
        let encoding : typelayerCommonDynamic.Encoding;
        let myFirstArgumentFieldTestVal : string;
        let resultingBin : Uint8Array;
        let val : myFirstPackageServicesMyFirstServiceStructures.MyFirstFunctionInput;
        let valToCheck : myFirstPackageServicesMyFirstServiceStructures.MyFirstFunctionInput;
        encoding = new typelayerCommonEncodingsMsgpack.MsgPackEncoding({});
        myFirstArgumentFieldTestVal = "abc";
        val = new myFirstPackageServicesMyFirstServiceStructures.MyFirstFunctionInput({myFirstArgument: myFirstArgumentFieldTestVal});
        encoder = encoding.encodingStartEncoding();
        myFirstPackageServicesMyFirstServiceDynamic.dynamicPutMyFirstFunctionInput(encoder, val);
        resultingBin = encoder.encoderToBinary();
        decoder = encoding.encodingStartDecoding(resultingBin);
        valToCheck = myFirstPackageServicesMyFirstServiceDynamic.dynamicGetObjMyFirstFunctionInput(decoder);
        chai.expect(val).to.deep.equal(valToCheck);
    });
    mocha.it("myFirstFunctionOutputMyFirstReturn0Json", () => {
        let decoder : typelayerCommonDynamic.Decoder;
        let encoder : typelayerCommonDynamic.Encoder;
        let encoding : typelayerCommonDynamic.Encoding;
        let myFirstReturnFieldTestVal : myFirstPackageSchemasMyFirstModuleStructures.MyFirstStructure;
        let resultingBin : Uint8Array;
        let val : myFirstPackageServicesMyFirstServiceStructures.MyFirstFunctionOutput;
        let valToCheck : myFirstPackageServicesMyFirstServiceStructures.MyFirstFunctionOutput;
        encoding = new typelayerCommonEncodingsJson.JsonEncoding({});
        myFirstReturnFieldTestVal = myFirstPackageSchemasMyFirstModuleStructures.defaultMyFirstStructure();
        val = new myFirstPackageServicesMyFirstServiceStructures.MyFirstFunctionOutput({myFirstReturn: myFirstReturnFieldTestVal});
        encoder = encoding.encodingStartEncoding();
        myFirstPackageServicesMyFirstServiceDynamic.dynamicPutMyFirstFunctionOutput(encoder, val);
        resultingBin = encoder.encoderToBinary();
        decoder = encoding.encodingStartDecoding(resultingBin);
        valToCheck = myFirstPackageServicesMyFirstServiceDynamic.dynamicGetObjMyFirstFunctionOutput(decoder);
        chai.expect(val).to.deep.equal(valToCheck);
    });
    mocha.it("myFirstFunctionOutputMyFirstReturn0MsgPack", () => {
        let decoder : typelayerCommonDynamic.Decoder;
        let encoder : typelayerCommonDynamic.Encoder;
        let encoding : typelayerCommonDynamic.Encoding;
        let myFirstReturnFieldTestVal : myFirstPackageSchemasMyFirstModuleStructures.MyFirstStructure;
        let resultingBin : Uint8Array;
        let val : myFirstPackageServicesMyFirstServiceStructures.MyFirstFunctionOutput;
        let valToCheck : myFirstPackageServicesMyFirstServiceStructures.MyFirstFunctionOutput;
        encoding = new typelayerCommonEncodingsMsgpack.MsgPackEncoding({});
        myFirstReturnFieldTestVal = myFirstPackageSchemasMyFirstModuleStructures.defaultMyFirstStructure();
        val = new myFirstPackageServicesMyFirstServiceStructures.MyFirstFunctionOutput({myFirstReturn: myFirstReturnFieldTestVal});
        encoder = encoding.encodingStartEncoding();
        myFirstPackageServicesMyFirstServiceDynamic.dynamicPutMyFirstFunctionOutput(encoder, val);
        resultingBin = encoder.encoderToBinary();
        decoder = encoding.encodingStartDecoding(resultingBin);
        valToCheck = myFirstPackageServicesMyFirstServiceDynamic.dynamicGetObjMyFirstFunctionOutput(decoder);
        chai.expect(val).to.deep.equal(valToCheck);
    });
    mocha.it("mySecondFunctionInputArgOne0Json", () => {
        let argOneFieldTestVal : myFirstPackageSchemasMyFirstModuleStructures.MyEnumStructure;
        let argTwoDefault : string;
        let decoder : typelayerCommonDynamic.Decoder;
        let encoder : typelayerCommonDynamic.Encoder;
        let encoding : typelayerCommonDynamic.Encoding;
        let resultingBin : Uint8Array;
        let val : myFirstPackageServicesMyFirstServiceStructures.MySecondFunctionInput;
        let valToCheck : myFirstPackageServicesMyFirstServiceStructures.MySecondFunctionInput;
        encoding = new typelayerCommonEncodingsJson.JsonEncoding({});
        argOneFieldTestVal = myFirstPackageSchemasMyFirstModuleStructures.defaultMyEnumStructure();
        argTwoDefault = "";
        val = new myFirstPackageServicesMyFirstServiceStructures.MySecondFunctionInput({argOne: argOneFieldTestVal, argTwo: argTwoDefault});
        encoder = encoding.encodingStartEncoding();
        myFirstPackageServicesMyFirstServiceDynamic.dynamicPutMySecondFunctionInput(encoder, val);
        resultingBin = encoder.encoderToBinary();
        decoder = encoding.encodingStartDecoding(resultingBin);
        valToCheck = myFirstPackageServicesMyFirstServiceDynamic.dynamicGetObjMySecondFunctionInput(decoder);
        chai.expect(val).to.deep.equal(valToCheck);
    });
    mocha.it("mySecondFunctionInputArgOne0MsgPack", () => {
        let argOneFieldTestVal : myFirstPackageSchemasMyFirstModuleStructures.MyEnumStructure;
        let argTwoDefault : string;
        let decoder : typelayerCommonDynamic.Decoder;
        let encoder : typelayerCommonDynamic.Encoder;
        let encoding : typelayerCommonDynamic.Encoding;
        let resultingBin : Uint8Array;
        let val : myFirstPackageServicesMyFirstServiceStructures.MySecondFunctionInput;
        let valToCheck : myFirstPackageServicesMyFirstServiceStructures.MySecondFunctionInput;
        encoding = new typelayerCommonEncodingsMsgpack.MsgPackEncoding({});
        argOneFieldTestVal = myFirstPackageSchemasMyFirstModuleStructures.defaultMyEnumStructure();
        argTwoDefault = "";
        val = new myFirstPackageServicesMyFirstServiceStructures.MySecondFunctionInput({argOne: argOneFieldTestVal, argTwo: argTwoDefault});
        encoder = encoding.encodingStartEncoding();
        myFirstPackageServicesMyFirstServiceDynamic.dynamicPutMySecondFunctionInput(encoder, val);
        resultingBin = encoder.encoderToBinary();
        decoder = encoding.encodingStartDecoding(resultingBin);
        valToCheck = myFirstPackageServicesMyFirstServiceDynamic.dynamicGetObjMySecondFunctionInput(decoder);
        chai.expect(val).to.deep.equal(valToCheck);
    });
    mocha.it("mySecondFunctionInputArgTwo0Json", () => {
        let argOneDefault : myFirstPackageSchemasMyFirstModuleStructures.MyEnumStructure;
        let argTwoFieldTestVal : string;
        let decoder : typelayerCommonDynamic.Decoder;
        let encoder : typelayerCommonDynamic.Encoder;
        let encoding : typelayerCommonDynamic.Encoding;
        let resultingBin : Uint8Array;
        let val : myFirstPackageServicesMyFirstServiceStructures.MySecondFunctionInput;
        let valToCheck : myFirstPackageServicesMyFirstServiceStructures.MySecondFunctionInput;
        encoding = new typelayerCommonEncodingsJson.JsonEncoding({});
        argTwoFieldTestVal = "";
        argOneDefault = myFirstPackageSchemasMyFirstModuleStructures.defaultMyEnumStructure();
        val = new myFirstPackageServicesMyFirstServiceStructures.MySecondFunctionInput({argTwo: argTwoFieldTestVal, argOne: argOneDefault});
        encoder = encoding.encodingStartEncoding();
        myFirstPackageServicesMyFirstServiceDynamic.dynamicPutMySecondFunctionInput(encoder, val);
        resultingBin = encoder.encoderToBinary();
        decoder = encoding.encodingStartDecoding(resultingBin);
        valToCheck = myFirstPackageServicesMyFirstServiceDynamic.dynamicGetObjMySecondFunctionInput(decoder);
        chai.expect(val).to.deep.equal(valToCheck);
    });
    mocha.it("mySecondFunctionInputArgTwo0MsgPack", () => {
        let argOneDefault : myFirstPackageSchemasMyFirstModuleStructures.MyEnumStructure;
        let argTwoFieldTestVal : string;
        let decoder : typelayerCommonDynamic.Decoder;
        let encoder : typelayerCommonDynamic.Encoder;
        let encoding : typelayerCommonDynamic.Encoding;
        let resultingBin : Uint8Array;
        let val : myFirstPackageServicesMyFirstServiceStructures.MySecondFunctionInput;
        let valToCheck : myFirstPackageServicesMyFirstServiceStructures.MySecondFunctionInput;
        encoding = new typelayerCommonEncodingsMsgpack.MsgPackEncoding({});
        argTwoFieldTestVal = "";
        argOneDefault = myFirstPackageSchemasMyFirstModuleStructures.defaultMyEnumStructure();
        val = new myFirstPackageServicesMyFirstServiceStructures.MySecondFunctionInput({argTwo: argTwoFieldTestVal, argOne: argOneDefault});
        encoder = encoding.encodingStartEncoding();
        myFirstPackageServicesMyFirstServiceDynamic.dynamicPutMySecondFunctionInput(encoder, val);
        resultingBin = encoder.encoderToBinary();
        decoder = encoding.encodingStartDecoding(resultingBin);
        valToCheck = myFirstPackageServicesMyFirstServiceDynamic.dynamicGetObjMySecondFunctionInput(decoder);
        chai.expect(val).to.deep.equal(valToCheck);
    });
    mocha.it("mySecondFunctionInputArgTwo1Json", () => {
        let argOneDefault : myFirstPackageSchemasMyFirstModuleStructures.MyEnumStructure;
        let argTwoFieldTestVal : string;
        let decoder : typelayerCommonDynamic.Decoder;
        let encoder : typelayerCommonDynamic.Encoder;
        let encoding : typelayerCommonDynamic.Encoding;
        let resultingBin : Uint8Array;
        let val : myFirstPackageServicesMyFirstServiceStructures.MySecondFunctionInput;
        let valToCheck : myFirstPackageServicesMyFirstServiceStructures.MySecondFunctionInput;
        encoding = new typelayerCommonEncodingsJson.JsonEncoding({});
        argTwoFieldTestVal = "a";
        argOneDefault = myFirstPackageSchemasMyFirstModuleStructures.defaultMyEnumStructure();
        val = new myFirstPackageServicesMyFirstServiceStructures.MySecondFunctionInput({argTwo: argTwoFieldTestVal, argOne: argOneDefault});
        encoder = encoding.encodingStartEncoding();
        myFirstPackageServicesMyFirstServiceDynamic.dynamicPutMySecondFunctionInput(encoder, val);
        resultingBin = encoder.encoderToBinary();
        decoder = encoding.encodingStartDecoding(resultingBin);
        valToCheck = myFirstPackageServicesMyFirstServiceDynamic.dynamicGetObjMySecondFunctionInput(decoder);
        chai.expect(val).to.deep.equal(valToCheck);
    });
    mocha.it("mySecondFunctionInputArgTwo1MsgPack", () => {
        let argOneDefault : myFirstPackageSchemasMyFirstModuleStructures.MyEnumStructure;
        let argTwoFieldTestVal : string;
        let decoder : typelayerCommonDynamic.Decoder;
        let encoder : typelayerCommonDynamic.Encoder;
        let encoding : typelayerCommonDynamic.Encoding;
        let resultingBin : Uint8Array;
        let val : myFirstPackageServicesMyFirstServiceStructures.MySecondFunctionInput;
        let valToCheck : myFirstPackageServicesMyFirstServiceStructures.MySecondFunctionInput;
        encoding = new typelayerCommonEncodingsMsgpack.MsgPackEncoding({});
        argTwoFieldTestVal = "a";
        argOneDefault = myFirstPackageSchemasMyFirstModuleStructures.defaultMyEnumStructure();
        val = new myFirstPackageServicesMyFirstServiceStructures.MySecondFunctionInput({argTwo: argTwoFieldTestVal, argOne: argOneDefault});
        encoder = encoding.encodingStartEncoding();
        myFirstPackageServicesMyFirstServiceDynamic.dynamicPutMySecondFunctionInput(encoder, val);
        resultingBin = encoder.encoderToBinary();
        decoder = encoding.encodingStartDecoding(resultingBin);
        valToCheck = myFirstPackageServicesMyFirstServiceDynamic.dynamicGetObjMySecondFunctionInput(decoder);
        chai.expect(val).to.deep.equal(valToCheck);
    });
    mocha.it("mySecondFunctionInputArgTwo2Json", () => {
        let argOneDefault : myFirstPackageSchemasMyFirstModuleStructures.MyEnumStructure;
        let argTwoFieldTestVal : string;
        let decoder : typelayerCommonDynamic.Decoder;
        let encoder : typelayerCommonDynamic.Encoder;
        let encoding : typelayerCommonDynamic.Encoding;
        let resultingBin : Uint8Array;
        let val : myFirstPackageServicesMyFirstServiceStructures.MySecondFunctionInput;
        let valToCheck : myFirstPackageServicesMyFirstServiceStructures.MySecondFunctionInput;
        encoding = new typelayerCommonEncodingsJson.JsonEncoding({});
        argTwoFieldTestVal = "abc";
        argOneDefault = myFirstPackageSchemasMyFirstModuleStructures.defaultMyEnumStructure();
        val = new myFirstPackageServicesMyFirstServiceStructures.MySecondFunctionInput({argTwo: argTwoFieldTestVal, argOne: argOneDefault});
        encoder = encoding.encodingStartEncoding();
        myFirstPackageServicesMyFirstServiceDynamic.dynamicPutMySecondFunctionInput(encoder, val);
        resultingBin = encoder.encoderToBinary();
        decoder = encoding.encodingStartDecoding(resultingBin);
        valToCheck = myFirstPackageServicesMyFirstServiceDynamic.dynamicGetObjMySecondFunctionInput(decoder);
        chai.expect(val).to.deep.equal(valToCheck);
    });
    mocha.it("mySecondFunctionInputArgTwo2MsgPack", () => {
        let argOneDefault : myFirstPackageSchemasMyFirstModuleStructures.MyEnumStructure;
        let argTwoFieldTestVal : string;
        let decoder : typelayerCommonDynamic.Decoder;
        let encoder : typelayerCommonDynamic.Encoder;
        let encoding : typelayerCommonDynamic.Encoding;
        let resultingBin : Uint8Array;
        let val : myFirstPackageServicesMyFirstServiceStructures.MySecondFunctionInput;
        let valToCheck : myFirstPackageServicesMyFirstServiceStructures.MySecondFunctionInput;
        encoding = new typelayerCommonEncodingsMsgpack.MsgPackEncoding({});
        argTwoFieldTestVal = "abc";
        argOneDefault = myFirstPackageSchemasMyFirstModuleStructures.defaultMyEnumStructure();
        val = new myFirstPackageServicesMyFirstServiceStructures.MySecondFunctionInput({argTwo: argTwoFieldTestVal, argOne: argOneDefault});
        encoder = encoding.encodingStartEncoding();
        myFirstPackageServicesMyFirstServiceDynamic.dynamicPutMySecondFunctionInput(encoder, val);
        resultingBin = encoder.encoderToBinary();
        decoder = encoding.encodingStartDecoding(resultingBin);
        valToCheck = myFirstPackageServicesMyFirstServiceDynamic.dynamicGetObjMySecondFunctionInput(decoder);
        chai.expect(val).to.deep.equal(valToCheck);
    });
    mocha.it("mySecondFunctionOutputRetOne0Json", () => {
        let decoder : typelayerCommonDynamic.Decoder;
        let encoder : typelayerCommonDynamic.Encoder;
        let encoding : typelayerCommonDynamic.Encoding;
        let resultingBin : Uint8Array;
        let retOneFieldTestVal : Array<string>;
        let val : myFirstPackageServicesMyFirstServiceStructures.MySecondFunctionOutput;
        let valToCheck : myFirstPackageServicesMyFirstServiceStructures.MySecondFunctionOutput;
        encoding = new typelayerCommonEncodingsJson.JsonEncoding({});
        retOneFieldTestVal = [];
        val = new myFirstPackageServicesMyFirstServiceStructures.MySecondFunctionOutput({retOne: retOneFieldTestVal});
        encoder = encoding.encodingStartEncoding();
        myFirstPackageServicesMyFirstServiceDynamic.dynamicPutMySecondFunctionOutput(encoder, val);
        resultingBin = encoder.encoderToBinary();
        decoder = encoding.encodingStartDecoding(resultingBin);
        valToCheck = myFirstPackageServicesMyFirstServiceDynamic.dynamicGetObjMySecondFunctionOutput(decoder);
        chai.expect(val).to.deep.equal(valToCheck);
    });
    mocha.it("mySecondFunctionOutputRetOne0MsgPack", () => {
        let decoder : typelayerCommonDynamic.Decoder;
        let encoder : typelayerCommonDynamic.Encoder;
        let encoding : typelayerCommonDynamic.Encoding;
        let resultingBin : Uint8Array;
        let retOneFieldTestVal : Array<string>;
        let val : myFirstPackageServicesMyFirstServiceStructures.MySecondFunctionOutput;
        let valToCheck : myFirstPackageServicesMyFirstServiceStructures.MySecondFunctionOutput;
        encoding = new typelayerCommonEncodingsMsgpack.MsgPackEncoding({});
        retOneFieldTestVal = [];
        val = new myFirstPackageServicesMyFirstServiceStructures.MySecondFunctionOutput({retOne: retOneFieldTestVal});
        encoder = encoding.encodingStartEncoding();
        myFirstPackageServicesMyFirstServiceDynamic.dynamicPutMySecondFunctionOutput(encoder, val);
        resultingBin = encoder.encoderToBinary();
        decoder = encoding.encodingStartDecoding(resultingBin);
        valToCheck = myFirstPackageServicesMyFirstServiceDynamic.dynamicGetObjMySecondFunctionOutput(decoder);
        chai.expect(val).to.deep.equal(valToCheck);
    });
    mocha.it("mySecondFunctionOutputRetOne1Json", () => {
        let decoder : typelayerCommonDynamic.Decoder;
        let encoder : typelayerCommonDynamic.Encoder;
        let encoding : typelayerCommonDynamic.Encoding;
        let resultingBin : Uint8Array;
        let retOneBlocks : string;
        let retOneFieldTestVal : Array<string>;
        let val : myFirstPackageServicesMyFirstServiceStructures.MySecondFunctionOutput;
        let valToCheck : myFirstPackageServicesMyFirstServiceStructures.MySecondFunctionOutput;
        encoding = new typelayerCommonEncodingsJson.JsonEncoding({});
        retOneBlocks = "";
        retOneFieldTestVal = [retOneBlocks];
        val = new myFirstPackageServicesMyFirstServiceStructures.MySecondFunctionOutput({retOne: retOneFieldTestVal});
        encoder = encoding.encodingStartEncoding();
        myFirstPackageServicesMyFirstServiceDynamic.dynamicPutMySecondFunctionOutput(encoder, val);
        resultingBin = encoder.encoderToBinary();
        decoder = encoding.encodingStartDecoding(resultingBin);
        valToCheck = myFirstPackageServicesMyFirstServiceDynamic.dynamicGetObjMySecondFunctionOutput(decoder);
        chai.expect(val).to.deep.equal(valToCheck);
    });
    mocha.it("mySecondFunctionOutputRetOne1MsgPack", () => {
        let decoder : typelayerCommonDynamic.Decoder;
        let encoder : typelayerCommonDynamic.Encoder;
        let encoding : typelayerCommonDynamic.Encoding;
        let resultingBin : Uint8Array;
        let retOneBlocks : string;
        let retOneFieldTestVal : Array<string>;
        let val : myFirstPackageServicesMyFirstServiceStructures.MySecondFunctionOutput;
        let valToCheck : myFirstPackageServicesMyFirstServiceStructures.MySecondFunctionOutput;
        encoding = new typelayerCommonEncodingsMsgpack.MsgPackEncoding({});
        retOneBlocks = "";
        retOneFieldTestVal = [retOneBlocks];
        val = new myFirstPackageServicesMyFirstServiceStructures.MySecondFunctionOutput({retOne: retOneFieldTestVal});
        encoder = encoding.encodingStartEncoding();
        myFirstPackageServicesMyFirstServiceDynamic.dynamicPutMySecondFunctionOutput(encoder, val);
        resultingBin = encoder.encoderToBinary();
        decoder = encoding.encodingStartDecoding(resultingBin);
        valToCheck = myFirstPackageServicesMyFirstServiceDynamic.dynamicGetObjMySecondFunctionOutput(decoder);
        chai.expect(val).to.deep.equal(valToCheck);
    });
    mocha.it("mySecondFunctionOutputRetOne2Json", () => {
        let decoder : typelayerCommonDynamic.Decoder;
        let encoder : typelayerCommonDynamic.Encoder;
        let encoding : typelayerCommonDynamic.Encoding;
        let resultingBin : Uint8Array;
        let retOneBlocks : string;
        let retOneFieldTestVal : Array<string>;
        let val : myFirstPackageServicesMyFirstServiceStructures.MySecondFunctionOutput;
        let valToCheck : myFirstPackageServicesMyFirstServiceStructures.MySecondFunctionOutput;
        encoding = new typelayerCommonEncodingsJson.JsonEncoding({});
        retOneBlocks = "";
        retOneFieldTestVal = [retOneBlocks, retOneBlocks];
        val = new myFirstPackageServicesMyFirstServiceStructures.MySecondFunctionOutput({retOne: retOneFieldTestVal});
        encoder = encoding.encodingStartEncoding();
        myFirstPackageServicesMyFirstServiceDynamic.dynamicPutMySecondFunctionOutput(encoder, val);
        resultingBin = encoder.encoderToBinary();
        decoder = encoding.encodingStartDecoding(resultingBin);
        valToCheck = myFirstPackageServicesMyFirstServiceDynamic.dynamicGetObjMySecondFunctionOutput(decoder);
        chai.expect(val).to.deep.equal(valToCheck);
    });
    mocha.it("mySecondFunctionOutputRetOne2MsgPack", () => {
        let decoder : typelayerCommonDynamic.Decoder;
        let encoder : typelayerCommonDynamic.Encoder;
        let encoding : typelayerCommonDynamic.Encoding;
        let resultingBin : Uint8Array;
        let retOneBlocks : string;
        let retOneFieldTestVal : Array<string>;
        let val : myFirstPackageServicesMyFirstServiceStructures.MySecondFunctionOutput;
        let valToCheck : myFirstPackageServicesMyFirstServiceStructures.MySecondFunctionOutput;
        encoding = new typelayerCommonEncodingsMsgpack.MsgPackEncoding({});
        retOneBlocks = "";
        retOneFieldTestVal = [retOneBlocks, retOneBlocks];
        val = new myFirstPackageServicesMyFirstServiceStructures.MySecondFunctionOutput({retOne: retOneFieldTestVal});
        encoder = encoding.encodingStartEncoding();
        myFirstPackageServicesMyFirstServiceDynamic.dynamicPutMySecondFunctionOutput(encoder, val);
        resultingBin = encoder.encoderToBinary();
        decoder = encoding.encodingStartDecoding(resultingBin);
        valToCheck = myFirstPackageServicesMyFirstServiceDynamic.dynamicGetObjMySecondFunctionOutput(decoder);
        chai.expect(val).to.deep.equal(valToCheck);
    });
});